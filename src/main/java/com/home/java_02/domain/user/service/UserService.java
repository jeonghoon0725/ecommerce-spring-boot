package com.home.java_02.domain.user.service;

import com.home.java_02.common.exception.ServiceException;
import com.home.java_02.common.exception.ServiceExceptionCode;
import com.home.java_02.domain.user.dto.UserCreateRequest;
import com.home.java_02.domain.user.dto.UserRankDto;
import com.home.java_02.domain.user.dto.UserResponse;
import com.home.java_02.domain.user.dto.UserSearchResponse;
import com.home.java_02.domain.user.dto.UserUpdateRequest;
import com.home.java_02.domain.user.entity.User;
import com.home.java_02.domain.user.mapper.UserMapper;
import com.home.java_02.domain.user.repository.UserRepository;
import com.home.java_02.domain.user.repository.UserSqlMapper;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class UserService {

  private final UserRepository userRepository;
  private final PasswordEncoder passwordEncoder;
  private final UserMapper userMapper; //mapstruct ÏÇ¨Ïö©
  private final UserSqlMapper userSqlMapper;

  public void save() {

  }

  @Transactional
  public UserResponse createUser(UserCreateRequest request) {
    return userMapper.toResponse(
        userRepository.save(User.builder()
            .name(request.getName())
            .email(request.getEmail())
            .passwordHash(passwordEncoder.encode(request.getPasswordHash()))
            .build())
    );
  }

  public List<UserSearchResponse> searchUser() {
    //    return userRepository.findAll().stream()
//        .map((user) -> UserSearchResponse.builder()
//            .id(user.getId())
//            .name(user.getName())
//            .email(user.getEmail())
//            .createdAt(user.getCreatedAt())
//            .build())
//        .toList();
    //ÏúÑÏôÄ Í∞ôÏù¥ ÏùºÏùºÏù¥ Îß§Ïπ≠Ìï†ÌïÑÏöîÏóÜÏù¥ ÏïÑÎûò mapstruct ÌôúÏöîÌïòÏó¨ Í∞ÑÎûµÌûà ÌïòÍ≥† ÎπÑÏ¶àÎãàÏä§Ïóê ÏßëÏ§ëÌï†ÏàòÏûàÏùå
    return userRepository.findAll().stream()
        // ÏûêÎ∞î ÎûåÎã§ÏãùÎ¨∏Î≤ïÏúºÎ°ú userMapper.toSearch() ÎèôÏùº, Îã®, ÌååÎùºÎØ∏ÌÑ∞Í∞Ä Îã®ÏùºÏùºÎïåÎßå ÏÇ¨Ïö©Í∞ÄÎä•, Î©ÄÌã∞Î©¥ Î∂àÍ∞ÄÎä•
        .map(userMapper::toSearch)
        .toList();
  }

  @Transactional
  public UserResponse getUserById(Long userId) {
//    User user = getUser(userId);
//
//    return UserResponse.builder()
//        .id(user.getId())
//        .name(user.getName())
//        .email(user.getEmail())
//        .createdAt(user.getCreatedAt())
//        .build();

    //ÏúÑÏôÄ Í∞ôÏù¥ ÏùºÏùºÏù¥ Îß§Ïπ≠Ìï†ÌïÑÏöîÏóÜÏù¥ ÏïÑÎûò mapstruct ÌôúÏöîÌïòÏó¨ Í∞ÑÎûµÌûà ÌïòÍ≥† ÎπÑÏ¶àÎãàÏä§Ïóê ÏßëÏ§ëÌï†ÏàòÏûàÏùå
    return userMapper.toResponse(getUser(userId));
  }

  @Transactional
  public void create(UserCreateRequest request) {
    //ÌïÑÎìúÍ∞Ä Ï†ÅÏúºÎ©¥ Î™®Î•ºÍπå Ïó¨Îü¨Í∞úÏùºÍ≤ΩÏö∞ ÏùºÏùºÏù¥ Îß§ÌïëÌïòÎ©¥ ÏãúÍ∞ÑÏò§ÎûòÍ±∏Î†§ mapstructs ÌôúÏö©ÌïòÎ©¥ Ï¢ãÏùå
//    userRepository.save(User.builder()
//        .name(request.getName())
//        .email(request.getEmail())
//        .passwordHash(request.getPassword())
//        .build());

    //ÏúÑÏôÄ Í∞ôÏù¥ ÏùºÏùºÏù¥ Îß§Ïπ≠Ìï†ÌïÑÏöîÏóÜÏù¥ ÏïÑÎûò mapstruct ÌôúÏöîÌïòÏó¨ Í∞ÑÎûµÌûà ÌïòÍ≥† ÎπÑÏ¶àÎãàÏä§Ïóê ÏßëÏ§ëÌï†ÏàòÏûàÏùå
    userRepository.save(userMapper.toEntity(request));
  }

  @Transactional
  public void update(Long userId, UserUpdateRequest request) {
    User user = getUser(userId);

    user.setName(request.getName());
    user.setEmail(request.getEmail());

    userRepository.save(user);

  }

  @Transactional
  public void delete(Long userId) {
    userRepository.delete(getUser(userId));
  }

  // Î≥ÄÍ≤ΩÏàòÌñâ Ï†Ñ ÎåÄÏÉÅÏ°∞ÌöåÌïòÎäî Î°úÏßÅÏùÑ Í≥µÌÜµÌï®ÏàòÌôî
  private User getUser(Long userId) {
    return userRepository.findById(userId)
        .orElseThrow(() -> new ServiceException(ServiceExceptionCode.NOT_FOUND_USER));
  }

  public void findTopSpendingUser() {
    int topN = 5; // ÏÉÅÏúÑ 5Î™Ö Ï°∞Ìöå
    List<UserRankDto> topCustomers = userSqlMapper.findTopSpendingUser(topN);

    System.out.println("üèÜ Ïö∞Ïàò ÌöåÏõê Top " + topN);
    topCustomers.forEach(rank ->
        System.out.println(rank.getName() + ": " + rank.getTotalSpent() + "Ïõê")
    );
  }
}
